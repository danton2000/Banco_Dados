CREATE OR REPLACE FUNCTION FN_TEXTO_VALOR_MULTA (
	_VALOR DECIMAL(8,2)
) RETURNS VARCHAR(30) AS
$$
DECLARE
_MSG VARCHAR(30);
BEGIN
_MSG := 'DEVE 1000 EM MULTAS';
IF _VALOR < 1000.00 THEN
_MSG := 'MENOS DE 1000 EM MULTAS';
ELSIF _VALOR > 1000.00 THEN
_MSG := 'MAIS DE 1000 EM MULTAS';
ELSIF _VALOR IS NULL THEN
_MSG:= 'SEM MULTAS';
END IF;
-- SOMENTE A PARTIR DA VERSÃO 8.4
/*CASE
WHEN (_VALOR < 1000) THEN _MSG := 'MENOS DE 1000 EM MULTAS‘;
WHEN (_VALOR > 1000.00) THEN _MSG := 'MAIS DE 1000 EM MULTAS‘;
WHEN (_VALOR IS NULL) THEN _MSG := 'SEM MULTAS‘;
END CASE;*/
RETURN _MSG;
END;
$$ LANGUAGE PLPGSQL;

SELECT * FROM EX_MOTORISTA;

SELECT * FROM EX_MULTA;

SELECT nome, totalmultas, FN_TEXTO_VALOR_MULTA(totalmultas) as "Mensagem"
FROM EX_MOTORISTA;

-- CURSOR

CREATE OR REPLACE FUNCTION FN_ATUALIZAR_TOTAL_MULTA( ) RETURNS VOID AS
$$
DECLARE
_CURSOR_MOTORISTA REFCURSOR;
_CNH VARCHAR(5);
BEGIN

-- CRIANDO UMA TABELA TEMPORIA
CREATE TEMP TABLE _MOT(
	cnh char(5)
);

-- CARREGANDO A TABELA TEMPORARIA
INSERT INTO _MOT
SELECT CNH FROM EX_MOTORISTA;

OPEN _CURSOR_MOTORISTA FOR
SELECT CNH FROM _MOT;

-- COLOCA 1° VALOR NO PONTEIRO PARA COMECAR O PROCESSAMENTO
FETCH _CURSOR_MOTORISTA INTO _CNH;

WHILE FOUND LOOP
UPDATE EX_MOTORISTA
SET TOTALMULTAS = (SELECT FN_OBTER_TOTAL_MULTA(_CNH))
WHERE CNH = _CNH;

-- COLOCA PROXIMO VALOR NO PONTEIRO PARA COMECAR O PROCESSAMENTO
FETCH _CURSOR_MOTORISTA INTO _CNH;
END LOOP;
CLOSE _CURSOR_MOTORISTA;
RETURN;
END;
$$
LANGUAGE PLPGSQL;

SELECT FN_ATUALIZAR_TOTAL_MULTA( );

-- VETOR

-- RANDOM

ELECT * FROM CLIENTE ORDER BY RANDOM() LIMIT 1;

SELECT CEIL(RANDOM() * 5);

-- SETOF

create or replace function fn_exemploRetornoResultSet() returns setof varchar(30) as
$$
declare
_nome varchar(30);
_cliente record;
begin
FOR _cliente IN select * from cliente LOOP
return next _cliente.nome;
END LOOP;
return;
end;
$$ language 'plpgsql';
select * from fn_exemploRetornoResultSet();